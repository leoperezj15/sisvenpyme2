<?php
                
/**
 * @author		Leonardo Perez Justiniano
 * @copyright 	2019
 * @version     1.0
 */

require_once "data/db.inc";
require_once "data/Usuario.inc";
require_once "data/Rol.inc";
require_once "data/Empleado.inc";
                     
class Usuario_Model extends DataBase
{
    function __construct()
    {
        $this->Open();
    }
    
    /** 
     * @abstract Función para obtener la lista de usuario(s) 
     * @return Lista de Structure_Usuario
     */
    function GetList()
    {
        $sql = "Select 
					t1.idUsuario as t1_idUsuario,
					t1.hash as t1_hash,
					t1.username as t1_username,
					t1.password as t1_password,
					t1.alias as t1_alias,
					t1.email as t1_email,
					t1.idRol as t1_idRol,
					t1.estado as t1_estado,
					t2.idRol as t2_idRol,
					t2.hash as t2_hash,
					t2.nombre as t2_nombre,
					t2.estado as t2_estado
				from usuario as t1
				inner join rol as t2
					 on t1.idRol = t2.idRol
				where t1.estado = 'Activo'";

        $res = $this->Execute($sql);
        
        $list = array();

        if ($this->ContainsData($res))
        {
            $data = $this->DataListStructure($res);

            foreach($data as $item)
            {
                $osUsuario = new Structure_Usuario;

 				$osUsuario->idUsuario->SetValue($item["t1_idUsuario"]);
 				$osUsuario->hash->SetValue($item["t1_hash"]);
 				$osUsuario->username->SetValue($item["t1_username"]);
 				$osUsuario->password->SetValue($item["t1_password"]);
 				$osUsuario->alias->SetValue($item["t1_alias"]);
 				$osUsuario->email->SetValue($item["t1_email"]);
 				$osUsuario->idRol->SetValue($item["t1_idRol"]);
 				$osUsuario->estado->SetValue($item["t1_estado"]);

					$osRol = new Structure_Rol;

 					$osRol->idRol->SetValue($item["t2_idRol"]);
 					$osRol->hash->SetValue($item["t2_hash"]);
 					$osRol->nombre->SetValue($item["t2_nombre"]);
 					$osRol->estado->SetValue($item["t2_estado"]);


				$osUsuario->Rol = $osRol;

 				$list[] = $osUsuario;                
            }            
        }
        
        return $list;
    }
    
    /** 
     * @abstract Función para obtener los Datos de usuario(s)
     * @param string hash
     * @return Structure_Usuario
     */
    function GetData($_hash)
    {
        $sql = "Select 
					t1.idUsuario as t1_idUsuario,
					t1.hash as t1_hash,
					t1.username as t1_username,
					t1.password as t1_password,
					t1.alias as t1_alias,
					t1.email as t1_email,
					t1.idRol as t1_idRol,
					t1.estado as t1_estado,
					t1.idEmpleado as t1_idEmpleado,
					t2.idRol as t2_idRol,
					t2.hash as t2_hash,
					t2.nombre as t2_nombre,
					t2.estado as t2_estado
				from usuario as t1
				inner join rol as t2
					 on t1.idRol = t2.idRol
				where t1.hash = '".$_hash."'";
        $res = $this->Execute($sql);
        
        $osUsuario = new Structure_Usuario;
        
        if ($this->ContainsData($res))
        {
            $data = $this->DataListStructure($res);            
            
            foreach($data as $item)
            {
 				$osUsuario->idUsuario->SetValue($item["t1_idUsuario"]);
 				$osUsuario->hash->SetValue($item["t1_hash"]);
 				$osUsuario->username->SetValue($item["t1_username"]);
 				$osUsuario->password->SetValue($item["t1_password"]);
 				$osUsuario->alias->SetValue($item["t1_alias"]);
 				$osUsuario->email->SetValue($item["t1_email"]);
 				$osUsuario->idRol->SetValue($item["t1_idRol"]);
				$osUsuario->estado->SetValue($item["t1_estado"]);
				$osUsuario->idEmpleado->SetValue($item["t1_idEmpleado"]);

					$osRol = new Structure_Rol;

 					$osRol->idRol->SetValue($item["t2_idRol"]);
 					$osRol->hash->SetValue($item["t2_hash"]);
 					$osRol->nombre->SetValue($item["t2_nombre"]);
 					$osRol->estado->SetValue($item["t2_estado"]);


				$osUsuario->Rol = $osRol;
            }            
        }
        
        return $osUsuario;
    }
    
    /** 
     * @abstract Función para guardar usuario
     * @param Structure_Usuario osUsuario
     * @return bool
     */
    function SaveUsuario($_osUsuario)
    {
        $sql = "Insert into usuario values (
				".$_osUsuario->idUsuario->GetValue().",
				'".$_osUsuario->hash->GetValue()."',
				'".$_osUsuario->username->GetValue()."',
				AES_ENCRYPT('".$_osUsuario->password->GetValue()."', '".SecurityKey."'),
				'".$_osUsuario->alias->GetValue()."',
				'".$_osUsuario->email->GetValue()."',
				".$_osUsuario->idRol->GetValue().",
				'".$_osUsuario->estado->GetValue()."',
				".$_osUsuario->idEmpleado->GetValue()."
			)";
        
        $res = $this->Execute($sql);

		$id   = $this->GetLastIdAutoGenerated();
		$hash = sha1($id);
		$sql2 = "Update usuario set hash = '".$hash."' where idUsuario = ".$id;
		$res2 = $this->Execute($sql2);
        
        $r = ($res and $res2) ? true : false;
		return $r;
    }
    
    /** 
     * @abstract Función para actualizar usuario
     * @param Structure_Usuario osUsuario
     * @return bool
     */
    function Update($_osUsuario)
    {
        $sql = "Update usuario set 
					username = '" . $_osUsuario->username->GetValue() . "',
					password = AES_ENCRYPT('" . $_osUsuario->password->GetValue() . "', '" . SecurityKey . "'),
					alias = '" . $_osUsuario->alias->GetValue() . "',
					email = '" . $_osUsuario->email->GetValue() . "',
					idRol = " . $_osUsuario->idRol->GetValue() . ",
					estado = '" . $_osUsuario->estado->GetValue() . "'
				where hash = '" . $_osUsuario->hash->GetValue() . "'";
        $res = $this->Execute($sql);
        
        return $res;
    }
    
    /** 
     * @abstract Función para eliminar usuario
     * @param string hash
     * @return bool
     */
    function Delete($_hash)
    {
        $sql = "Update usuario set estado = 'Inactivo' where hash = '" . $_hash . "'";
        $res = $this->Execute($sql);
        
        return $res;
    }

	/**
	 * @abstract Función para autenticar usuarios
	 * @param string user, string pswd
	 * @return Structure_Usuario
	 */
	function VerificarLogin($_user, $_pswd)
	{
		$sql = "Select * from usuario where username = '". base64_decode($_user) ."' and password = AES_ENCRYPT('". base64_decode($_pswd)."','". SecurityKey."')";
		$res = $this->Execute($sql);

		$osUsuario = null;

		if ($this->ContainsData($res)){

			$row = $this->FetchArray($res);

			$hash = $row["hash"];
			
			$osUsuario = $this->GetData($hash);

		}

		return $osUsuario;
	}

	/**
	* @abstract Función para obtener una lista de Usuario y empleados 
	* @param All;
	* @return Lista de Structure_Usuario y Structure_Empleado
	*/
	function GetListForEmploye($_nro)
	{
		$concat = "";
		if($_nro != "All")//Mientras diferente a "All" sera individual pero si es "All" son todos
		{
			$concat = "WHERE u.idUsuario = ".$_nro;
		}
	
		$sql = "SELECT 
		u.idUsuario as u_idUsuario,
		u.hash as u_hash,
		u.username as u_username,
		u.email as u_email,
		u.idRol as u_idRol,
		u.idEmpleado as u_idEmpleado,
		u.estado as u_estado,

		r.idRol as r_idRol,
		r.hash as r_hash,
		r.nombre as r_nombre,

		e.idEmpleado as e_idEmpleado,
		e.hash as e_hash,
		e.nombre as e_nombre,
		e.a_paterno as e_a_paterno,
		e.a_materno as e_a_materno,
		e.ci as e_ci,
		e.fecha_ingreso as e_fecha_ingreso,
		e.fecha_nac as e_fecha_nac

		FROM `usuario` u
		INNER JOIN `rol` r on u.idRol = r.idRol
		INNER JOIN `empleado` e on u.idEmpleado = e.idEmpleado AND e.condicion = 'CU'
		".$concat;

		$res = $this->Execute($sql);
        
        $list = array();

        if ($this->ContainsData($res))
        {
            $data = $this->DataListStructure($res);

            foreach($data as $item)
            {
                $osUsuario = new Structure_Usuario;

 				$osUsuario->idUsuario->SetValue($item["u_idUsuario"]);
 				$osUsuario->hash->SetValue($item["u_hash"]);
 				$osUsuario->username->SetValue($item["u_username"]);
 				$osUsuario->email->SetValue($item["u_email"]);
 				$osUsuario->idRol->SetValue($item["u_idRol"]);
 				$osUsuario->estado->SetValue($item["u_estado"]);

					$osRol = new Structure_Rol;

 					$osRol->idRol->SetValue($item["r_idRol"]);
 					$osRol->hash->SetValue($item["r_hash"]);
 					$osRol->nombre->SetValue($item["r_nombre"]);


 					$osEmpleado = new Structure_Empleado;

 					$osEmpleado->idEmpleado->SetValue($item["e_idEmpleado"]);
 					$osEmpleado->hash->SetValue($item["e_hash"]);
 					$osEmpleado->nombre->SetValue($item["e_nombre"]);
 					$osEmpleado->a_paterno->SetValue($item["e_a_paterno"]);
 					$osEmpleado->a_materno->SetValue($item["e_a_materno"]);
 					$osEmpleado->ci->SetValue($item["e_ci"]);
					$osEmpleado->fecha_ingreso->SetValue($item["e_fecha_ingreso"]);
					$osEmpleado->fecha_nac->SetValue($item["e_fecha_nac"]);


				$osUsuario->Rol = $osRol;
				$osUsuario->Empleado = $osEmpleado;

 				$list[] = $osUsuario;                
            }            
        }
        
        return $list;

	}
	/**
	* @abstract Función para verificar existencia de username 
	* @param $_username;
	* @return Bool
	*/
	function VerificarUsername($_username)
	{
		$sql = "Select * from usuario where username='".$_username."'";
        $res = $this->Execute($sql);
        if ($this->ContainsData($res))
        {
            return true;          
        }
        else
        {
            return false;
        }

	}

	function GetUsuario($_hash)
    {
        $sql = "SELECT * FROM `usuario` WHERE hash='".$_hash."'";

        $res = $this->Execute($sql);

        if ($this->ContainsData($res))
        {
            $row = $this->FetchArray($res);

            $idUsuario = $row["idUsuario"];

            return $idUsuario;

        }
        else
        {
            return false;
        }
	}
	
	/* 
	
	*/

	function ChangePass($_user,$_newpass)
	{
		$sql = "UPDATE usuario SET password = AES_ENCRYPT('".base64_decode($_newpass)."','".SecurityKey."') WHERE username = '".base64_decode($_user)."'";
        $res = $this->Execute($sql);
        
        return $res;
	}
}
                
?>